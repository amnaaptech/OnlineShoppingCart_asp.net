<!-- Updated Views/Cart/OrderDetails.cshtml -->
@model OnlineShoppingCart.Models.Order

<main class="main">
    <!-- Page Title -->
    <div class="page-title">
        <div class="container">
            <nav class="breadcrumbs">
                <ol>
                    <li><a asp-controller="Home" asp-action="Index">Home</a></li>
                    <li><a asp-controller="Cart" asp-action="MyOrders">My Orders</a></li>
                    <li class="current">Order Details</li>
                </ol>
            </nav>
            <h1>Order Details - #@Model.OrderNumber</h1>
        </div>
    </div>

    <!-- Order Details Section -->
    <section class="order-details section" data-aos="fade-up" data-aos-delay="100">
        <div class="container">
            <!-- Success/Error Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle me-2"></i> @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i> @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <div class="card shadow-sm">
                <div class="card-header text-white" style="background:#232323">
                    <h5 class="mb-0 text-white"> Order # @Model.OrderNumber</h5>
                    <small>Placed on @Model.OrderDate.ToString("dddd, MMMM dd, yyyy")</small>
                </div>
                <div class="card-body">
                    <!-- Order Items -->
                    <div class="mb-4">
                        <h6 class="section-header">Order Items</h6>
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Category</th>
                                        <th>Quantity</th>
                                        <th>Unit Price</th>
                                        <th>Total</th>
                                        <th>Warranty</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.OrderItems)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <img src="~/ProdImages/@item.Product.ImagePath"
                                                         alt="@item.Product.ProductName"
                                                         class="img-fluid me-2"
                                                         style="width: 50px; height: 50px;"
                                                         onerror="this.src='/images/no-image.jpg'">
                                                    @item.Product.ProductName
                                                </div>
                                            </td>
                                            <td>@item.Product.Category.CategoryName</td>
                                            <td>@item.Quantity</td>
                                            <td>Rs @item.UnitPrice.ToString("N2")</td>
                                            <td>Rs @(item.Quantity* item.UnitPrice)</td>
                                            <td>@(item.WarrantyPeriodDays.HasValue ? $"{item.WarrantyPeriodDays} days" : "N/A")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Shipping and Order Summary -->
                    <div class="row">
                        <div class="col-md-6 mb-4">
                            <h6 class="section-header">Shipping Address</h6>
                            <div class="card bg-light p-3">
                                <p class="mb-1"><strong>@Model.FullName</strong></p>
                                <p class="mb-1">@Model.Address</p>
                                <p class="mb-1">@Model.City, @Model.State @Model.ZipCode</p>
                                <p class="mb-0">Phone: @Model.Phone</p>
                            </div>
                        </div>

                       <div class="col-md-6 mb-4">
    <h6 class="section-header"> Order Summary</h6>
    <div class="card bg-light p-3">
        <div class="d-flex justify-content-between mb-2">
            <span>Subtotal</span>
            <span>Rs @Model.Subtotal.ToString("N2")</span>
        </div>
        <div class="d-flex justify-content-between mb-2">
            <span>Shipping</span>
            <span>Rs @Model.Shipping.ToString("N2")</span>
        </div>
        <div class="d-flex justify-content-between mb-2">
            <span>Tax (5%)</span>
            <span>Rs @Model.Tax.ToString("N2")</span>
        </div>
        <hr>
        <div class="d-flex justify-content-between">
            <strong>Total</strong>
            <strong>Rs @Model.Total.ToString("N2")</strong>
        </div>
        <div class="mt-3">
            <p class="mb-1">Payment Method: <strong>@Model.PaymentMethod.ToUpper()</strong></p>
            @if (Model.PaymentMethod == "card")
            {
                <p class="mb-1">Card Holder: <strong>@(Model.CardHolderName ?? "N/A")</strong></p>
                <p class="mb-1">Card Number: <strong>@(Model.CardNumber != null ? "**** **** **** " + Model.CardNumber.Substring(Model.CardNumber.Length - 4) : "N/A")</strong></p>
            }
            else if (Model.PaymentMethod == "bank")
            {
                <p class="mb-1">Bank Name: <strong>@(Model.BankName ?? "N/A")</strong></p>
                <p class="mb-1">Account Number: <strong>@(Model.BankAccountNumber ?? "N/A")</strong></p>
                <p class="mb-1">Transaction ID: <strong>@(Model.TransactionId ?? "N/A")</strong></p>
            }
            <p class="mb-1">Payment Status: <span class="badge @GetStatusClass(Model.PaymentStatus)">@Model.PaymentStatus</span></p>
            <p class="mb-1">Order Status: <span class="badge @GetStatusClass(Model.OrderStatus)">@Model.OrderStatus</span></p>
            <p class="mb-1">Estimated Delivery: <strong>@Model.EstimatedDeliveryDate.ToString("dddd, MMMM dd, yyyy")</strong></p>
            @if (Model.DispatchedDate.HasValue)
            {
                <p class="mb-1">Dispatched On: <strong>@Model.DispatchedDate.Value.ToString("dddd, MMMM dd, yyyy")</strong></p>
            }
            @if (Model.DeliveryDate.HasValue)
            {
                <p class="mb-0">Delivered On: <strong>@Model.DeliveryDate.Value.ToString("dddd, MMMM dd, yyyy")</strong></p>
            }
        </div>
    </div>
</div>
                    </div>

                    <!-- Return/Replacement Section -->
                    <div class="row">
                        <div class="col-12 mb-4">
                            <h6 class="section-header"> Return or Replacement</h6>
                            <div class="card bg-light p-3">
                                @if (Model.OrderStatus == "Delivered" && Model.DeliveryDate.HasValue)
                                {
                                    var daysSinceDelivery = (DateTime.Now - Model.DeliveryDate.Value).TotalDays;
                                    var canRequest = daysSinceDelivery <= 7 && !Model.ReturnRequested && !Model.ReplacementRequested;

                                    if (canRequest)
                                    {
                                        <!-- Return Request Form -->
                                       
                                        <form asp-action="RequestReturn" asp-route-orderId="@Model.OrderId" method="post" class="mb-3 return-request-form">
    @Html.AntiForgeryToken()
    <div class="mb-3">
        <label for="returnReason" class="form-label">Reason for Return</label>
        <textarea class="form-control" id="returnReason" name="returnReason" rows="3" placeholder="Why do you want to return this order?" maxlength="500"></textarea>
        <div class="invalid-feedback">Please provide a reason for return.</div>
    </div>
    @if (Model.PaymentMethod == "cod")
    {
        <div class="mb-3">
            <label for="refundMethod" class="form-label">Refund Method <span class="text-danger">*</span></label>
            <select class="form-control" id="refundMethod" name="refundMethod" onchange="toggleRefundFields()">
                <option value="" disabled selected>Select refund method</option>
                <option value="easypaisa">Easypaisa</option>
                <option value="bank">Bank Transfer</option>
            </select>
            <div class="invalid-feedback">Please select a refund method.</div>
        </div>
        <div class="mb-3" id="easypaisaField" style="display: none;">
            <label for="refundEasypaisaNumber" class="form-label">Easypaisa Number <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="refundEasypaisaNumber" name="refundEasypaisaNumber" pattern="[0-9]{11}" maxlength="11" placeholder="e.g., 03XXXXXXXXX">
            <div class="invalid-feedback">Please enter a valid 11-digit Easypaisa number.</div>
        </div>
        <div class="mb-3" id="bankAccountField" style="display: none;">
            <label for="refundBankAccountNumber" class="form-label">Bank Account Number <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="refundBankAccountNumber" name="refundBankAccountNumber" pattern="[0-9]{16}" maxlength="16" placeholder="e.g., 1234567890123456">
            <div class="invalid-feedback">Please enter a valid 16-digit bank account number.</div>
        </div>
    }
    <button type="submit" class="btn btn-warning">
         Request Return
    </button>
</form>
                                        <!-- Replacement Request Form -->
                                        <form asp-action="RequestReplacement" asp-route-orderId="@Model.OrderId" method="post">
                                            @Html.AntiForgeryToken()
                                            <div class="mb-3">
                                                <label for="replacementReason" class="form-label">Reason for Replacement</label>
                                                <textarea class="form-control" id="replacementReason" name="replacementReason" rows="3" placeholder="Why do you want to replace this order?" maxlength="500"></textarea>
                                            </div>
                                            <button type="submit" class="btn btn-info">
                                                <i class="bi bi-arrow-repeat me-1"></i> Request Replacement
                                            </button>
                                        </form>
                                    }
                                    else
                                    {
                                        <p class="text-muted">
                                          @if (Model.ReturnRequested)
{
    <span>Return Request Status: <strong class="badge @GetStatusClass(Model.ReturnStatus)">@Model.ReturnStatus</strong></span>
    @if (!string.IsNullOrEmpty(Model.ReturnReason))
    {
        <br />
        <span>Reason: @Model.ReturnReason</span>
    }
    @if (!string.IsNullOrEmpty(Model.RefundEasypaisaNumber))
    {
        <br />
        <span>Refund to Easypaisa: <strong>@Model.RefundEasypaisaNumber</strong></span>
    }
    @if (!string.IsNullOrEmpty(Model.RefundBankAccountNumber))
    {
        <br />
        <span>Refund to Bank Account: <strong>@Model.RefundBankAccountNumber</strong></span>
    }
}
                                            else if (Model.ReplacementRequested)
                                            {
                                                <span>Replacement Request Status: <strong class="badge @GetStatusClass(Model.ReplacementStatus)">@Model.ReplacementStatus</strong></span>
                                                @if (!string.IsNullOrEmpty(Model.ReplacementReason))
                                                {
                                                    <br />
                                    
                                                    <span>Reason: @Model.ReplacementReason</span>
                                                }
                                            }
                                            else
                                            {
                                                <span>Return/Replacement requests can only be made within 7 days of delivery.</span>
                                            }
                                        </p>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted">Return or replacement available only after delivery.</p>
                                }

                                
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-white border-0 p-3">
                    @if (!Model.DispatchedDate.HasValue && Model.OrderStatus != "Canceled")
                    {
                        <form asp-action="CancelOrder" asp-route-orderId="@Model.OrderId"
                              method="post"
                              class="d-inline cancel-order-form"
                              onsubmit="return confirm('Are you sure you want to cancel this order?');">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-danger me-2">
                                <i class="bi bi-x-circle me-1"></i> Cancel Order
                            </button>
                        </form>
                    }
                    <a asp-controller="Cart" asp-action="MyOrders" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-2"></i> Back to Orders
                    </a>
                </div>
            </div>
        </div>
    </section>
</main>



<script>
    document.addEventListener('DOMContentLoaded', function () {
        setTimeout(function () {
            document.querySelectorAll('.alert').forEach(alert => {
                alert.classList.remove('show');
                alert.classList.add('fade');
            });
        }, 5000);
    });

    function getStatusClass(status) {
        switch (status.toLowerCase()) {
            case 'pending': return 'badge-pending';
            case 'cleared': return 'badge-cleared';
            case 'paidondelivery': return 'badge-paidondelivery';
            case 'delivered': return 'badge-delivered';
            case 'canceled': return 'badge-canceled';
            case 'approved': return 'badge-approved';
            case 'rejected': return 'badge-rejected';
            default: return 'badge-secondary';
        }
    }
</script>

<script>
    function toggleRefundFields() {
        const refundMethod = document.getElementById('refundMethod').value;
        const easypaisaField = document.getElementById('easypaisaField');
        const bankAccountField = document.getElementById('bankAccountField');

        easypaisaField.style.display = refundMethod === 'easypaisa' ? 'block' : 'none';
        bankAccountField.style.display = refundMethod === 'bank' ? 'block' : 'none';

        // Reset fields when hidden
        if (refundMethod !== 'easypaisa') {
            document.getElementById('refundEasypaisaNumber').value = '';
        }
        if (refundMethod !== 'bank') {
            document.getElementById('refundBankAccountNumber').value = '';
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const form = document.querySelector('.return-request-form');
        if (form) {
            form.addEventListener('submit', function (e) {
                let isValid = true;
                let errorMessage = '';

                const refundMethod = document.getElementById('refundMethod');
                const easypaisaNumber = document.getElementById('refundEasypaisaNumber');
                const bankAccountNumber = document.getElementById('refundBankAccountNumber');
                const returnReason = document.getElementById('returnReason');

                // Validate return reason
                if (!returnReason.value.trim()) {
                    isValid = false;
                    returnReason.classList.add('is-invalid');
                    errorMessage += 'Return reason is required.\n';
                } else {
                    returnReason.classList.remove('is-invalid');
                }

                // Validate refund method for COD orders
                if ('@Model.PaymentMethod' === 'cod') {
                    if (!refundMethod.value) {
                        isValid = false;
                        refundMethod.classList.add('is-invalid');
                        errorMessage += 'Please select a refund method.\n';
                    } else {
                        refundMethod.classList.remove('is-invalid');
                    }

                    if (refundMethod.value === 'easypaisa' && !/^[0-9]{11}$/.test(easypaisaNumber.value)) {
                        isValid = false;
                        easypaisaNumber.classList.add('is-invalid');
                        errorMessage += 'Please enter a valid 11-digit Easypaisa number.\n';
                    } else {
                        easypaisaNumber.classList.remove('is-invalid');
                    }

                    if (refundMethod.value === 'bank' && !/^[0-9]{16}$/.test(bankAccountNumber.value)) {
                        isValid = false;
                        bankAccountNumber.classList.add('is-invalid');
                        errorMessage += 'Please enter a valid 16-digit bank account number.\n';
                    } else {
                        bankAccountNumber.classList.remove('is-invalid');
                    }
                }

                if (!isValid) {
                    e.preventDefault();
                    const errorContainer = document.createElement('div');
                    errorContainer.className = 'alert alert-danger';
                    errorContainer.innerHTML = `<strong>Please correct the following errors:</strong><br>${errorMessage.replace(/\n/g, '<br>')}`;
                    form.prepend(errorContainer);
                    form.scrollIntoView({ behavior: 'smooth' });
                }
            });
        }
    });
</script>

@functions {
    public string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "badge-pending",
            "cleared" => "badge-cleared",
            "paidondelivery" => "badge-paidondelivery",
            "delivered" => "badge-delivered",
            "canceled" => "badge-canceled",
            "approved" => "badge-approved",
            "rejected" => "badge-rejected",
            _ => "badge-secondary"
        };
    }
}